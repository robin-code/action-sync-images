# 工作流名称
name: Sync-Images-to-AliyunCr-Example
# 工作流运行时显示名称
run-name: ${{ github.actor }} is Sync Images to Aliyun.
# 怎样触发工作流
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 工作流程任务（通常含有一个或多个步骤）
jobs:
  syncimages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repos
        uses: actions/checkout@v4

      - name: Install Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo
      # 添加调试步骤，确认文件位置
      - name: Debug - List Files
        run: |
          pwd
          ls -la

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1

      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          registry: ${{ vars.DOCKER_REGISTRY }}

      - name: Use Skopeo Tools Sync Image to Aliyun Cr
        env:
          IMAGE_REGISTRY_NAME_SPACE: ${{ vars.DOCKER_REGISTRY }}/${{ vars.REGISTRY_NAME_SPACE }}
        run: bash scripts/sync_to_aliyun.sh

  trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Install cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Trigger Drone build via Cloudflare Tunnel
        env:
          DRONE_URL: https://drone.riji.life/api/repos/DevOps/action-sync-images/builds?branch=main
          DRONE_TOKEN: ${{ secrets.DRONE_TOKEN }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          curl --location --request POST "$DRONE_URL" \
            --header "Authorization: Bearer ${DRONE_TOKEN}" \
            --header "CF-Access-Client-Id: ${CF_ACCESS_CLIENT_ID}" \
            --header "CF-Access-Client-Secret: ${CF_ACCESS_CLIENT_SECRET}" \
            --header 'Accept: */*' \
            --header 'Connection: keep-alive'
#      - name: Trigger Drone build
#        run: |
#          curl -X POST "${{ secrets.DRONE_SERVER }}/api/repos/DevOps/{repo}/builds?branch=main" \
#          -H "Authorization: Bearer ${{ secrets.DRONE_TOKEN }}"